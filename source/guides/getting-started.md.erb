---
title: Getting Started
sort_key: /1
---

How to install and use the Coral SDK, an overview with examples.
{: .lead}

# Download {#download}
{: .page-header}

Coral is released as source code only. Get the tarball and read on for build instructions!
{: .lead}

[<i class="icon-download"></i> Download Coral <%= data.coral.release %> (stable)](https://github.com/coral-framework/coral/archive/<%= data.coral.release %>.tar.gz){: .btn .btn-outline}

# Installing the Coral SDK {#install}
{: .page-header}

You only need CMake and a few minutes to build and install the Coral SDK. If you have any difficulty---or think this process isn't simple enough---please [let us know](/community)!
{: .lead}

## Prerequisites {#prerequisites}

Coral is written in standard C++ and does not depend on external libraries. The source code is platform-agnostic, except for a few features such as dynamic libraries. Before continuing, please check our [list of supported platforms and compilers](../guides/portability#supported).

In addition to a supported compiler, you'll need [CMake](http://www.cmake.org/) to configure and build the SDK. Coral adopts CMake as its official build system and this guide assumes you are somewhat familiar with it.

Finally, to run automated tests you must have the [GTest](https://code.google.com/p/googletest/) framework installed. This is optional but recommended to confirm the integrity of the SDK on your system. If you also want to use GTest in your project, the tutorial will show you how to integrate it into the development cycle of a Coral module.

### Installing CMake
- On Linux, with APT: `sudo apt-get install cmake`
- On OSX, with [brew](http://brew.sh/): `brew install cmake`
- On Windows: download the official CMake installer [from this page](http://www.cmake.org/cmake/resources/software.html).

## Run CMake {#run-cmake}

You must specify three directories for CMake:

- _SOURCE_DIR_: where to find the source code. For example `~/projects/coral` or wherever you extracted Coral.
- _BUILD_DIR_: where to perform the build---a separate directory, such as `~/projects/coral/build`.
- _INSTALL_DIR_: where to install the project---a permanent location, such as `~/sdk/coral`.

With the source code in the _SOURCE_DIR_, create an empty _BUILD_DIR_ and run CMake in it. The CMake variable `CMAKE_INSTALL_PREFIX` should be set to the _INSTALL_DIR_. For example:

``` terminal
~ $ cd ~/projects/coral
~/projects/coral $ mkdir build
~/projects/coral $ cd build
~/projects/coral/build $ cmake -DCMAKE_INSTALL_PREFIX=~/sdk/coral ..
```

Other options may be needed depending on your environment. If GTest is installed but CMake cannot find it, try setting the environment variable `GTEST_ROOT` to its install location.

In terms of generators, Coral works well with Xcode and Visual Studio, in addition to makefiles. All default build types are supported---Release, Debug, MinSizeRel and RelWithDebInfo. If you use makefiles you must set `CMAKE_BUILD_TYPE` when calling CMake, for example `-DCMAKE_BUILD_TYPE=Release`.

## Compile the SDK {#compile}

Depending on your options, CMake should have generated either a makefile or an IDE project in _BUILD_DIR_. Now you can use your native build system to compile the SDK:

- If you're using makefiles, simply call `make`.
- If you're using an IDE, build the `ALL_BUILD` target.

## Run Tests {#run-tests}

If you have GTest, CMake should have created the `testsuites` target, which you must build before running the tests.

To run the tests, build the `test` target. Even if you don't have GTest it will still run a few smoke tests. On UNIX, if you have [Valgrind](http://valgrind.org/) installed, the tests will also run through Valgrind's memcheck.

## Install the SDK {#install-sdk}

Once all tests have passed you may install the SDK. To do this you build the `install` target. There is a catch, though: you must install in Release and Debug modes.

After choosing a __INSTALL_DIR__ for Coral, set the environment variable `CORAL_ROOT` to point to it. It will be used by other projects when they need to find the Coral SDK.

# What's in the SDK {#whatsin}

How the SDK is organized.

- `coral` --- the CORAL_ROOT
  - `bin`
  - `cmake`
  - `modules`
    - `co`
    - `lua`
  - `lib`

# Hello Coral {#hello}

To use Coral you will need, in addition to the Coral SDK, a decent grounding in the [C++ programming language](http://en.wikipedia.org/wiki/C++) and [object-oriented programming](http://en.wikipedia.org/wiki/Object-oriented_programming). Familiarity with [component-based software engineering](http://en.wikipedia.org/wiki/Component-based_software_engineering) is useful but not required, since the fundamental concepts are introduced in the documentation.

To be continued.
