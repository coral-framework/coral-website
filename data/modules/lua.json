{"name":"lua","datetime":"2014-01-18 02:06:33","types":[{"name":"lua.Component","kind":"component","doc":"\n\n\tA dynamic component, with interfaces defined in run-time and methods implemented in Lua.\n ","members":[{"kind":"facet","name":"dynamicServiceProvider","type":"co.IDynamicServiceProvider","doc":"\n Handles requests to the proxy interfaces created for this component."},{"kind":"facet","name":"reflector","type":"co.IReflector","doc":"\n This component has its own built-in reflector."}]},{"name":"lua.Exception","kind":"exception","doc":"\n General-purpose exception raised by the Lua module."},{"name":"lua.IInterceptor","kind":"interface","doc":"\n\n\tObserves all interaction between Lua and Coral services.\n\n\tCurrently notifications take place after the interaction is completed\n\tsuccessfully (and only if no exception is raised by the called method).\n ","base":"co.IService","members":[{"kind":"method","name":"postGetField","returnType":"void","doc":"\n Called after Lua gets the value of a service field.","parameters":[{"name":"service","type":"co.IService","mode":"in"},{"name":"field","type":"co.IField","mode":"in"},{"name":"value","type":"any","mode":"in"}],"exceptions":[]},{"kind":"method","name":"postGetService","returnType":"void","doc":"\n Called after Lua obtains a service from an object port.","parameters":[{"name":"object","type":"co.IObject","mode":"in"},{"name":"port","type":"co.IPort","mode":"in"},{"name":"service","type":"co.IService","mode":"in"}],"exceptions":[]},{"kind":"method","name":"postInvoke","returnType":"void","doc":"\n Called after a service method called from Lua returns.","parameters":[{"name":"service","type":"co.IService","mode":"in"},{"name":"method","type":"co.IMethod","mode":"in"},{"name":"args","type":"any[]","mode":"in"},{"name":"returnValue","type":"any","mode":"in"}],"exceptions":[]},{"kind":"method","name":"postSetField","returnType":"void","doc":"\n Called after Lua sets the value of a service field.","parameters":[{"name":"service","type":"co.IService","mode":"in"},{"name":"field","type":"co.IField","mode":"in"},{"name":"value","type":"any","mode":"in"}],"exceptions":[]},{"kind":"method","name":"postSetService","returnType":"void","doc":"\n Called after Lua changes the service connected to an object receptacle.","parameters":[{"name":"object","type":"co.IObject","mode":"in"},{"name":"receptable","type":"co.IPort","mode":"in"},{"name":"service","type":"co.IService","mode":"in"}],"exceptions":[]},{"kind":"method","name":"serviceReleased","returnType":"void","doc":"\n Called when Lua releases all references to a service.","parameters":[{"name":"service","type":"co.IService","mode":"in"}],"exceptions":[]},{"kind":"method","name":"serviceRetained","returnType":"void","doc":"\n Called when Lua first gets a reference to a service.","parameters":[{"name":"service","type":"co.IService","mode":"in"}],"exceptions":[]}],"cpp":""},{"name":"lua.ILauncher","kind":"interface","doc":"\n\n\tMain interface for the lua.Launcher component.\n ","base":"co.IService","members":[{"kind":"method","name":"main","returnType":"int32","doc":"\n\n\t\tExpects a Lua script name as first argument.\n\t\tAll other arguments are passed to the script.\n\t ","parameters":[{"name":"args","type":"string[]","mode":"in"}],"exceptions":[]}],"cpp":""},{"name":"lua.IScripted","kind":"interface","doc":"\n\n\tAnnotation for components scripted in Lua.\n ","base":"co.IDynamicTypeProvider","members":[{"kind":"field","name":"value","type":"string","isReadOnly":false,"doc":""}],"cpp":""},{"name":"lua.IState","kind":"interface","doc":"\n\n\tFor interfacing with Lua.\n\tThe main Lua state is exposed as a global lua.IState service.\n ","base":"co.IService","members":[{"kind":"field","name":"interceptors","type":"lua.IInterceptor[]","isReadOnly":true,"doc":"\n List of active interceptors."},{"kind":"method","name":"addInterceptor","returnType":"void","doc":"\n Adds an interceptor at the end of the list.","parameters":[{"name":"interceptor","type":"lua.IInterceptor","mode":"in"}],"exceptions":[]},{"kind":"method","name":"call","returnType":"int32","doc":"\n\n\t\tCalls a function from a Lua module.\n\n\t\tThis method is roughly equivalent to the following code in Lua:\n\t\t\\code results = require( moduleName )[functionName]( args ) \\encode\n\n\t\tThe module is obtained through \"require\" (so it is only loaded once) and must return\n\t\teither a function or a table containing functions. If the module returns a function,\n\t\tyou must pass an empty \\a functionName; otherwise, you should specify the name of the\n\t\tfunction to be called.\n\n\t\tThe list of arguments passed to the function is given by \\a args.\n\n\t\tIf \\a results is non-empty, it will be assigned with the results of the function call,\n\t\tup to either the number of returned values or the number of elements in \\a results,\n\t\twhichever is smaller. Each element in \\a results must be a valid output variable, and\n\t\tif a Lua value cannot be assigned to a var in \\a results due to type incompatibilities,\n\t\tan exception is raised.\n\n\t\t\\return the number of results actually returned by the function in Lua.\n\n\t\t\\throw lua.Exception if no module exists with the given \\a moduleName.\n\t\t\\throw lua.Exception if functionName does not specify a valid function to be called.\n\t\t\\throw lua.Exception if the function raises any Lua error.\n\t\t\\throw co.Exception if the function raises any Coral exception using <tt>co.raise()</tt>.\n\t\t\\throw lua.Exception if one of the function results could not be assigned to\n\t\t\t\t\tan output variable in \\a results due to type incompatibilities.\n\t ","parameters":[{"name":"moduleName","type":"string","mode":"in"},{"name":"functionName","type":"string","mode":"in"},{"name":"args","type":"any[]","mode":"in"},{"name":"results","type":"any[]","mode":"in"}],"exceptions":["lua.Exception"]},{"kind":"method","name":"collectGarbage","returnType":"void","doc":"\n Invokes a full cycle of the Lua garbage collector.","parameters":[],"exceptions":[]},{"kind":"method","name":"findScript","returnType":"bool","doc":"\n\n\t\tLooks for a Lua script with the given \\a name in the Coral path.\n\t\tThe search follows the same conventions used for locating Lua modules.\n\t\tReturns false if there is no script with the given name.\n\t ","parameters":[{"name":"name","type":"string","mode":"in"},{"name":"filename","type":"string","mode":"out"}],"exceptions":[]},{"kind":"method","name":"removeInterceptor","returnType":"void","doc":"\n Removes the given interceptor from the list.","parameters":[{"name":"interceptor","type":"lua.IInterceptor","mode":"in"}],"exceptions":[]}],"cpp":""},{"name":"lua.Launcher","kind":"component","doc":"\n\n\tLauncher component for use with the 'coral' launcher executable.\n\tThis launcher expects a fully-qualified Lua script name as first argument.\n\tThe script will be invoked with the same argument list, but with the first argument removed.\n ","members":[{"kind":"facet","name":"launcher","type":"lua.ILauncher","doc":""}]},{"name":"lua.lua","kind":"component","doc":"","members":[{"kind":"facet","name":"part","type":"co.IModulePart","doc":""}]},{"name":"lua.ModulePart","kind":"component","doc":"\n\n\tA co.IModulePart that wraps a Lua script in a module's dir.\n ","members":[{"kind":"facet","name":"part","type":"co.IModulePart","doc":""}]},{"name":"lua.ModulePartLoader","kind":"component","doc":"\n\n\tA co.IModulePartLoader that allows Coral modules to be written in Lua.\n\tIf a module 'foo' contains a script named 'foo.lua', this component\n\twill create a lua.ModulePart to wrap the script as a co.IModulePart.\n ","members":[{"kind":"facet","name":"loader","type":"co.IModulePartLoader","doc":""}]},{"name":"lua.ScriptedAnnotation","kind":"component","doc":"\n\n\tProvides the @lua.Scripted( \"script.name\" ) annotation.\n ","members":[{"kind":"facet","name":"annotation","type":"lua.IScripted","doc":""}]},{"name":"lua.Universe","kind":"component","doc":"\n\n\tSingleton that manages a Lua universe. If multiple instances are created, all will share\n\tthe same underlying lua_State. The system-wide lua.IState can be obtained as a service.\n ","members":[{"kind":"facet","name":"state","type":"lua.IState","doc":""}]}]}